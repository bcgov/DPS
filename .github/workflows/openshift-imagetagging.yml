# Used to trigger deployment to test and prod Openshift environment by Image stream re-tagging and labelling pod

name: Trigger deployment to test and prod Openshift environnment by Image stream re-tagging and labelling pod

on:
  workflow_dispatch:
    inputs:
      app_name:
        required: true
        description: App to be deployed
        type: choice
        options:
          - dps-email-poller
          - dps-email-worker
          - dps-notification-service
          - dps-payment-service
          - dps-registration-api
          - dps-validation-service
          - figaro-validation-service
          - spd-notification-worker
          - vips-notification-worker
      imageSourceEnv:
        type: choice
        description: Image Source environment
        options:
        - Select a Source Env Image to deploy
        - dev
        - test   
        required: true
        default: 'Select a Source Env Image to deploy'
      imageTargetEnv:
        type: choice
        description: Target Release Environment
        options:
        - Select a Target Env to deploy the Source Image
        - test
        - prod    
        required: true
        default: 'Select a Target Env to deploy the Source Image'
jobs:
  oc-image-tagging:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.imageTargetEnv }}
    steps:

      - name: Check deployment source and target values
        if: |
          (github.event.inputs.imageSourceEnv == 'dev' &&  github.event.inputs.imageTargetEnv == 'prod') ||
          (github.event.inputs.imageSourceEnv == github.event.inputs.imageTargetEnv )
        run: |
          echo "Selected source env: ${{ github.event.inputs.imageSourceEnv }} and target env: ${{ github.event.inputs.imageTargetEnv }}"
          echo "Please select correct source and target env. Alays deployment should happen from Dev to Test and then Test to Prod"
          exit 1
          
      - name: Git Checkout
        uses: actions/checkout@v3
        
        # Get the version number which is prefixed with the Github release branches in format release/{version}
      - name: Get Release Version
        run: |
          branch=${GITHUB_REF##*/}
          version=$(echo $branch | cut -d "/" -f2-)
          echo "releaseVersion=$version" >> $GITHUB_ENV
        
        # Get the latest Git short Sha# from the release branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get git commit short sha
        id: sha
        run: |
          shortSha=$(echo $(git rev-parse --short HEAD) | cut -c1-7)
          echo "gitsha=$shortSha" >> $GITHUB_ENV
        
        # Prints vital release parameters used
      - name: Print Release Variables
        run: |
          echo "Release Application: ${{ github.event.inputs.app_name }}"
          echo "Release Environment: ${{ github.event.inputs.imageTargetEnv }}"
          echo "Release Version: ${{ env.releaseVersion }}"
          echo "Release Git Sha: ${{env.gitsha}}"
      
        #Login to Openshift using OC Tools SA and Token for image stream tagging changes - Silver
      - name: Authenticate OC Tools SA - Silver
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_TOOLS_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL_SILVER}}
          openshift_token: ${{secrets.OPENSHIFT_SA_PIPELINE_TOKEN_SILVER}}
          namespace: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}

        # Re-Tag latest dev (source) dps-email-poller image to other env to trigger openshift deployment via DeploymentConfig
        # It also creates a tag with release version number to use it in case of rollback.
      - name: Retag ${{ github.event.inputs.app_name }} image to release env and version - Silver
        env:
          appName: ${{ github.event.inputs.app_name }}
          imageSourceEnv: ${{ github.event.inputs.imageSourceEnv }}
          imageTargetEnv: ${{ github.event.inputs.imageTargetEnv }}
          openshiftToolsNamespace: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          openshiftIImageRegistry: ${{secrets.OPENSHIFT_INTERNAL_REPOSITORY}}
          releaseVersion: ${{ env.releaseVersion }}
          gitSha: ${{ env.gitsha }}
        run: |
          oc tag ${openshiftIImageRegistry}/${openshiftToolsNamespace}/${appName}:${imageSourceEnv} ${appName}:${imageTargetEnv}
          oc tag ${openshiftIImageRegistry}/${openshiftToolsNamespace}/${appName}:${imageTargetEnv} ${appName}:${releaseVersion}.${gitSha}

        #Login to Openshift using OC SA and Token of respective env. for Pod labelling - Silver
      - name: Authenticate OC Env Specific SA - Silver
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL_SILVER}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN}}
          namespace: ${OPENSHIFT_NAMESPACE}

        # Labels the deployment config of the dps-email-poller application with release version number to spin up the pods labelled in same version - Silver
      - name: Labelling ${{ github.event.inputs.app_name }} DC to release version - Silver
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{ github.event.inputs.app_name }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

        # Wait to dps-email-poller DC rollout to get completed before proceeding next stage - Silver
      - name: Wait ${{ github.event.inputs.app_name }} for DC rollout - Silver
        env:
          appName: ${{ github.event.inputs.app_name }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
